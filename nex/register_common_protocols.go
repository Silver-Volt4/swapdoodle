package nex

import (
	"os"

	datastore "github.com/PretendoNetwork/nex-protocols-common-go/datastore"
	secureconnection "github.com/PretendoNetwork/nex-protocols-common-go/secure-connection"
	datastore_db "github.com/silver-volt4/swapdoodle/database/datastore"
	"github.com/silver-volt4/swapdoodle/globals"
)

func registerCommonProtocols() {
	secureconnection.NewCommonSecureConnectionProtocol(globals.HppServer)

	commonDataStoreProtocol := datastore.NewCommonDataStoreProtocol(globals.HppServer)

	commonDataStoreProtocol.SetS3Bucket(os.Getenv("PN_SD_CONFIG_S3_BUCKET"))
	commonDataStoreProtocol.SetMinIOClient(globals.MinIOClient)
	commonDataStoreProtocol.GetObjectInfoByDataID(datastore_db.GetObjectInfoByDataID)
	commonDataStoreProtocol.UpdateObjectPeriodByDataIDWithPassword(datastore_db.UpdateObjectPeriodByDataIDWithPassword)
	commonDataStoreProtocol.UpdateObjectMetaBinaryByDataIDWithPassword(datastore_db.UpdateObjectMetaBinaryByDataIDWithPassword)
	commonDataStoreProtocol.UpdateObjectDataTypeByDataIDWithPassword(datastore_db.UpdateObjectDataTypeByDataIDWithPassword)
	commonDataStoreProtocol.GetObjectSizeDataID(datastore_db.GetObjectSizeDataID)
	commonDataStoreProtocol.UpdateObjectUploadCompletedByDataID(datastore_db.UpdateObjectUploadCompletedByDataID)
	commonDataStoreProtocol.GetObjectInfoByPersistenceTargetWithPassword(datastore_db.GetObjectInfoByPersistenceTargetWithPassword)
	commonDataStoreProtocol.GetObjectInfoByDataIDWithPassword(datastore_db.GetObjectInfoByDataIDWithPassword)
	commonDataStoreProtocol.InitializeObjectByPreparePostParam(datastore_db.InitializeObjectByPreparePostParam)
	commonDataStoreProtocol.InitializeObjectRatingWithSlot(datastore_db.InitializeObjectRatingWithSlot)
	commonDataStoreProtocol.RateObjectWithPassword(datastore_db.RateObjectWithPassword)
	commonDataStoreProtocol.DeleteObjectByDataID(datastore_db.DeleteObjectByDataID)
	commonDataStoreProtocol.GetObjectOwnerByDataID(datastore_db.GetObjectOwnerByDataID)
}
